#coding: utf-8

DEBUG = True

import numpy as np
from hierarchical_model import BinTree

def run():
    n3 = 100  # Tree数
    depth = 5
    n2 = 40  # 中間層数
    n1 = 32  # Depth = 5なので32個いっぱいいっぱい使う
    p = 0.01  # 反転率

    inst = create_instruction_signals(n1, n2, n3, p)  # inst[0]: 入力,  inst[1]: 出力



def create_instruction_signals(n1, n2, n3, p):
    # 例題の入力を作成
    t_input = np.identity(n1)
    if DEBUG: print "create t_input:\n", t_input

    # 例題の出力を作成
    roots = []
    for i in xrange(n3):
        if np.random.random() > 0.5:
            roots.append(1)
        else:
            roots.append(-1)

    if DEBUG: print "create BinTree"
    bt = BinTree(depth = 5, p = p, parents = roots)
    if DEBUG: print "created BinTree as bt"

    t_ans = bt.make_dataset()
    if DEBUG: print "create t_ans:\n", t_ans

    return (t_input, t_ans)

if __name__ == "__main__":
    run()
